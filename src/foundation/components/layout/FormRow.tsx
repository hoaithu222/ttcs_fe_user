import React, { Children, isValidElement } from "react";

import clsx from "clsx";

const PADDING_Y_MAP = {
  xs: "py-1",
  sm: "py-2",
  md: "py-3",
  lg: "py-4",
  none: "py-0",
} as const;

interface FormRowProps {
  label?: string | React.ReactNode;
  name?: string; // auto generate id if needed
  required?: boolean;
  description?: string;
  error?: string;
  children: React.ReactNode;

  // Customization
  gapClass?: string;
  labelClass?: string;
  errorClass?: string;
  className?: string;
  horizontal?: boolean;
  testId?: string;
  isAction?: React.ReactNode;
  paddingY?: keyof typeof PADDING_Y_MAP;
  wrapperContentClass?: string;
  wrapperLabelClass?: string;
}

/**
 * @component FormRow
 *
 * üìå D√πng ƒë·ªÉ render m·ªôt d√≤ng trong form bao g·ªìm:
 *    - Label
 *    - M√¥ t·∫£ (description)
 *    - Field (children)
 *    - Error message
 *
 * üéØ TƒÉng t√≠nh nh·∫•t qu√°n v·ªÅ layout v√† accessibility khi hi·ªÉn th·ªã c√°c field nh·∫≠p li·ªáu.
 *
 * ---
 * ‚úÖ T√≠nh nƒÉng:
 * - T·ª± ƒë·ªông li√™n k·∫øt `label`, `description`, `error` v·ªõi field th√¥ng qua c√°c thu·ªôc t√≠nh `aria-*` v√† `htmlFor`.
 * - N·∫øu `children` l√† m·ªôt React element h·ª£p l·ªá, s·∫Ω t·ª± ƒë·ªông th√™m c√°c props:
 *   - `id` (theo `name`)
 *   - `aria-describedby` (n·∫øu c√≥ l·ªói)
 *   - `aria-invalid` (khi c√≥ l·ªói)
 *   - `className="w-full"` ƒë·ªÉ ƒë·∫£m b·∫£o field lu√¥n chi·∫øm full width
 * - Cho ph√©p t√πy bi·∫øn kho·∫£ng c√°ch v√† style th√¥ng qua c√°c prop nh∆∞ `gapClass`, `labelClass`, `errorClass`.
 *
 * ---
 * üß© Props:
 * - `label?: string` ‚Äì Nh√£n hi·ªÉn th·ªã ph√≠a tr√™n field.
 * - `name?: string` ‚Äì D√πng ƒë·ªÉ sinh `id`, `aria-describedby` v√† li√™n k·∫øt c√°c ph·∫ßn t·ª≠ l·∫°i v·ªõi nhau.
 * - `required?: boolean` ‚Äì N·∫øu `true`, hi·ªÉn th·ªã d·∫•u * m√†u ƒë·ªè b√™n c·∫°nh label.
 * - `description?: string` ‚Äì N·ªôi dung m√¥ t·∫£ chi ti·∫øt ph√≠a d∆∞·ªõi label.
 * - `error?: string` ‚Äì N·ªôi dung th√¥ng b√°o l·ªói hi·ªÉn th·ªã ph√≠a d∆∞·ªõi field.
 * - `children: React.ReactNode` ‚Äì Ph·∫ßn t·ª≠ nh·∫≠p li·ªáu (input, select, v.v.).
 * - `gapClass?: string` ‚Äì Class Tailwind cho kho·∫£ng c√°ch gi·ªØa c√°c ph·∫ßn (default: `'gap-2'`).
 * - `labelClass?: string` ‚Äì Class Tailwind cho label (default: `'text-body-14 text-neutral-8'`).
 * - `errorClass?: string` ‚Äì Class Tailwind cho l·ªói (default: `'text-caption-12 text-red-6 text-start'`).
 * - `testId?: string` ‚Äì G√°n `data-testid` ph·ª•c v·ª• unit test.
 * - `horizontal?: boolean` ‚Äì N·∫øu `true`, layout chuy·ªÉn sang h√†ng ngang.
 * - `isAction?: React.ReactNode` ‚Äì N·∫øu c√≥, s·∫Ω render ph·∫ßn custom action thay cho label/description.
 * - `paddingY?: keyof typeof PADDING_Y_MAP` ‚Äì Padding d·ªçc (top/bottom) c·ªßa FormRow.
 *
 * ---
 * ‚ôø Accessibility:
 * - G·∫Øn `htmlFor`, `aria-describedby`, `aria-invalid` v√† `id` h·ª£p l√Ω n·∫øu `name` ƒë∆∞·ª£c cung c·∫•p.
 *
 * ---
 * üí° V√≠ d·ª•:
 * ```tsx
 * <FormRow
 *   label="S·ªë ti·ªÅn chuy·ªÉn"
 *   name="amount"
 *   description="Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn ch√≠nh x√°c"
 *   error="S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá"
 *   required
 * >
 *   <Input name="amount" placeholder="Nh·∫≠p s·ªë ti·ªÅn" />
 * </FormRow>
 * ```
 */
const FormRow: React.FC<FormRowProps> = ({
  label,
  name,
  required = false,
  description,
  error,
  children,
  gapClass = "gap-2",
  labelClass = "text-body-14 text-neutral-8",
  errorClass = "text-caption-12 text-red-5 text-start mt-1",
  className = "",
  horizontal = false,
  testId,
  isAction,
  paddingY = "none",
  wrapperContentClass = "",
  wrapperLabelClass = "",
}) => {
  const fieldId = name ? `${name}-input` : undefined;
  const descriptionId = name && description ? `${name}-desc` : undefined;
  const errorId = name && error ? `${name}-error` : undefined;
  const describedByIds = [descriptionId, errorId].filter(Boolean).join(" ") || undefined;

  const enhancedChildren = Children.map(children, (child) => {
    if (isValidElement(child)) {
      const element = child as React.ReactElement<any>;
      const existingClass = element.props.className ?? "";
      return React.cloneElement(element, {
        id: fieldId,
        "aria-describedby": describedByIds,
        "aria-invalid": !!error,
        className: clsx(existingClass, ""),
      });
    }
    return child;
  });

  // helper render label + description or custom action
  const renderLabelSection = () =>
    isAction ? (
      <>{isAction}</>
    ) : (
      <>
        {label && (
          <label htmlFor={fieldId} className={clsx(labelClass, "text-start")}>
            {label}
            {required && <span className="ml-1 text-red-5">*</span>}
          </label>
        )}
        {description && (
          <p id={descriptionId} className="text-caption-11 text-neutral-6">
            {description}
          </p>
        )}
      </>
    );

  if (horizontal) {
    return (
      <div
        className={clsx(
          // 2 c·ªôt t·ªâ l·ªá 1fr ‚Äì 2fr = 1/3 ‚Äì 2/3
          "grid w-full grid-cols-[1fr_2fr] items-center",
          gapClass,
          PADDING_Y_MAP[paddingY],
          className
        )}
        data-testid={testId}
      >
        {/* C·ªôt 1: label + description */}
        <div className={clsx("flex flex-col space-y-1", wrapperLabelClass)}>
          {renderLabelSection()}
        </div>

        {/* C·ªôt 2: input */}
        <div className={clsx("flex flex-col", wrapperContentClass)}>{enhancedChildren}</div>

        {/* D√≤ng 2, ƒë·∫∑t l·ªói ·ªü c·ªôt 2 */}
        {error && (
          <p id={errorId} className={clsx(errorClass, "col-start-2 mt-1")}>
            {error}
          </p>
        )}
      </div>
    );
  }

  // vertical (m·∫∑c ƒë·ªãnh)
  return (
    <div
      className={clsx("flex flex-col", gapClass, PADDING_Y_MAP[paddingY], className)}
      data-testid={testId}
    >
      {renderLabelSection()}
      {enhancedChildren}
      {error && (
        <p id={errorId} className={clsx(errorClass)}>
          {error}
        </p>
      )}
    </div>
  );
};

export default FormRow;
