import React from "react";

import clsx from "clsx";

const MAX_LEFT_MAP = {
  xs: "24rem",
  sm: "28rem",
  md: "32rem",
  lg: "36rem",
  lg2: "38rem",
  xl: "40rem",
} as const;

interface GridLayoutProps {
  left?: React.ReactNode;
  right?: React.ReactNode;

  /** Min-width v√πng tr√°i (px) */
  minLeftWidth?: number;
  /** T·ª∑ l·ªá gi√£n n·ªü v√πng tr√°i */
  leftRatio?: number;
  /** T·ª∑ l·ªá gi√£n n·ªü v√πng ph·∫£i */
  rightRatio?: number;

  maxLeftWidth?: keyof typeof MAX_LEFT_MAP;

  /** Kho·∫£ng c√°ch gi·ªØa 2 v√πng, t∆∞∆°ng ·ª©ng Tailwind gap-{n} */
  gap?: number;
}

const gapClassMap: Record<number, string> = {
  0: "gap-0",
  1: "gap-1",
  2: "gap-2 tablet:gap-1 mobile:gap-1",
  3: "gap-3 tablet:gap-2 mobile:gap-1",
  4: "gap-4 tablet:gap-2 mobile:gap-1",
  5: "gap-5 tablet:gap-2 mobile:gap-1",
  6: "gap-6 tablet:gap-2 mobile:gap-1",
  8: "gap-8 tablet:gap-4 mobile:gap-2",
  10: "gap-10 tablet:gap-6 mobile:gap-4",
  12: "gap-12 tablet:gap-8 mobile:gap-6",
  16: "gap-16 tablet:gap-12 mobile:gap-8",
};

/**
 * @component GridLayout
 *
 * üì¶ Layout hai c·ªôt ƒë·ªông v·ªõi t·ª∑ l·ªá gi√£n n·ªü, h·ªó tr·ª£ min-width v√† kho·∫£ng c√°ch gi·ªØa hai v√πng.
 *
 * - S·ª≠ d·ª•ng `display: grid` v·ªõi c·∫•u h√¨nh `gridTemplateColumns` t√πy bi·∫øn theo props.
 * - H·ªó tr·ª£ chia b·ªë c·ª•c th√†nh 2 v√πng: `left` v√† `right`, c√≥ th·ªÉ truy·ªÅn 1 ho·∫∑c c·∫£ 2.
 * - V√πng `left` c√≥ th·ªÉ thi·∫øt l·∫≠p `min-width` v√† gi√£n n·ªü theo t·ª∑ l·ªá (`leftRatio`).
 * - V√πng `right` chi·∫øm ph·∫ßn c√≤n l·∫°i d·ª±a v√†o `rightRatio`.
 * - N·∫øu ch·ªâ truy·ªÅn 1 v√πng (left ho·∫∑c right), v√πng ƒë√≥ s·∫Ω chi·∫øm to√†n b·ªô chi·ªÅu r·ªông (`1fr`).
 * - T·ª± ƒë·ªông √°p d·ª•ng style m·∫∑c ƒë·ªãnh (`border`, `rounded`, `background`) cho t·ª´ng v√πng.
 *
 * ---
 * ‚úÖ Props:
 * - `left?: React.ReactNode` ‚Äî N·ªôi dung khu v·ª±c b√™n tr√°i (t√πy ch·ªçn).
 * - `right?: React.ReactNode` ‚Äî N·ªôi dung khu v·ª±c b√™n ph·∫£i (t√πy ch·ªçn).
 * - `minLeftWidth?: number` ‚Äî Chi·ªÅu r·ªông t·ªëi thi·ªÉu c·ªßa v√πng tr√°i (ƒë∆°n v·ªã px, m·∫∑c ƒë·ªãnh `440`).
 * - `leftRatio?: number` ‚Äî T·ª∑ l·ªá gi√£n n·ªü c·ªßa v√πng tr√°i (m·∫∑c ƒë·ªãnh `1`).
 * - `rightRatio?: number` ‚Äî T·ª∑ l·ªá gi√£n n·ªü c·ªßa v√πng ph·∫£i (m·∫∑c ƒë·ªãnh `2`).
 * - `gap?: number` ‚Äî Kho·∫£ng c√°ch gi·ªØa hai v√πng (t·ª´ `0` ‚Üí `16`), t∆∞∆°ng ·ª©ng v·ªõi Tailwind `gap-{n}` (m·∫∑c ƒë·ªãnh `2`).
 *
 * ---
 * üí° V√≠ d·ª•:
 * ```tsx
 * <GridLayout
 *   left={<Card>Th√¥ng tin</Card>}
 *   right={<FormSection />}
 *   minLeftWidth={400}
 *   leftRatio={1}
 *   rightRatio={3}
 *   gap={8}
 * />
 * ```
 *
 * ---
 * ‚ôø Accessibility:
 * - Component kh√¥ng can thi·ªáp tr·ª±c ti·∫øp v√†o `aria-*`.
 * - N·∫øu n·ªôi dung trong `left` ho·∫∑c `right` ch·ª©a input ho·∫∑c v√πng focusable, n√™n t·ª± th√™m `aria-*` ho·∫∑c heading ph√π h·ª£p.
 */
const GridLayout: React.FC<GridLayoutProps> = ({
  left,
  right,
  minLeftWidth = 440,
  maxLeftWidth = "md",
  rightRatio = 2,
  gap = 2,
}) => {
  const hasLeft = Boolean(left);
  const hasRight = Boolean(right);
  const gapClass = gapClassMap[gap] ?? gapClassMap[6]!;

  // CSS class chung cho m·ªói v√πng
  const baseClass =
    "relative h-full overflow-hidden rounded border border-border-1 bg-background-1";

  // X√°c ƒë·ªãnh gridTemplateColumns: n·∫øu ch·ªâ c√≥ 1 v√πng th√¨ 1fr, ng∆∞·ª£c l·∫°i minmax + fr
  const gridTemplateColumns =
    hasLeft && hasRight
      ? `minmax(${minLeftWidth}px, ${MAX_LEFT_MAP[maxLeftWidth]}) ${rightRatio}fr`
      : "1fr";

  return (
    <div className={clsx("grid size-full", gapClass)} style={{ gridTemplateColumns }}>
      {hasLeft && <div className={baseClass}>{left}</div>}
      {hasRight && <div className={baseClass}>{right}</div>}
    </div>
  );
};

export default GridLayout;
