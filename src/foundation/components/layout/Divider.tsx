import React, { memo } from "react";

import clsx from "clsx";

type Orientation = "horizontal" | "vertical";

type DividerSize = "xs" | "sm" | "md" | "lg" | "xl";
type DividerLength = "full" | "short";

type DividerVariant = "solid" | "dashed" | "dotted";

interface DividerProps {
  orientation?: Orientation;
  text?: string | React.ReactNode;
  className?: string;
  thickness?: DividerSize; // ƒë·ªïi sang ƒë·ªãnh danh r√µ r√†ng
  color?: string; // Tailwind border ho·∫∑c bg class
  length?: DividerLength;
  padding?: string;
  testId?: string;
  variant?: DividerVariant;
  classNameText?: string;
  style?: React.CSSProperties;
}

const THICKNESS_CLASS_MAP: Record<Orientation, Record<DividerSize, string>> = {
  horizontal: {
    xs: "h-px",
    sm: "h-0.5",
    md: "h-1",
    lg: "h-[1.5px]",
    xl: "h-[2px]",
  },
  vertical: {
    xs: "w-px",
    sm: "w-0.5",
    md: "w-1",
    lg: "w-[1.5px]",
    xl: "w-[2px]",
  },
};

const LENGTH_CLASS_MAP: Record<Orientation, Record<DividerLength, string>> = {
  horizontal: {
    full: "w-full",
    short: "w-16",
  },
  vertical: {
    full: "h-full",
    short: "h-16",
  },
};

/**
 * @component Divider
 *
 * üëâ Divider chu·∫©n h√≥a d√πng ƒë·ªÉ ngƒÉn c√°ch n·ªôi dung trong layout ho·∫∑c form.
 *
 * - H·ªó tr·ª£ c·∫£ 2 chi·ªÅu `horizontal` v√† `vertical`.
 * - T√πy ch·ªânh ƒë·ªô d√†y (`thickness`) theo c√°c m·ª©c ƒë·ªãnh danh t·ª´ `xs ‚Üí xl`.
 * - T√πy ch·ªânh ƒë·ªô d√†i (`length`) theo ki·ªÉu `full` ho·∫∑c `short`, ·ª©ng d·ª•ng cho c·∫£ 2 chi·ªÅu.
 * - C√≥ th·ªÉ th√™m vƒÉn b·∫£n ch√≠nh gi·ªØa Divider khi truy·ªÅn `text`.
 * - H·ªó tr·ª£ m√†u s·∫Øc t·ª± ch·ªçn (`color`) d·ª±a tr√™n class Tailwind `bg-*` ho·∫∑c `border-*`.
 * - Cho ph√©p th√™m `padding` b√™n ngo√†i Divider n·∫øu c·∫ßn.
 * - H·ªó tr·ª£ `data-testid` ƒë·ªÉ ki·ªÉm th·ª≠.
 *
 * @example
 * ```tsx
 * <Divider orientation="horizontal" thickness="sm" length="short" />
 *
 * <Divider
 *   orientation="horizontal"
 *   text="OR"
 *   color="border-primary-6"
 *   padding="py-4"
 * />
 * ```
 *
 * @props
 * - `orientation?: 'horizontal' | 'vertical'` ‚Äî H∆∞·ªõng c·ªßa Divider (m·∫∑c ƒë·ªãnh l√† 'horizontal').
 * - `text?: string | React.ReactNode` ‚Äî VƒÉn b·∫£n ch√≠nh gi·ªØa Divider (n·∫øu c√≥).
 * - `thickness?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'` ‚Äî ƒê·ªô d√†y c·ªßa Divider (theo chi·ªÅu t∆∞∆°ng ·ª©ng).
 * - `length?: 'full' | 'short'` ‚Äî ƒê·ªô d√†i Divider theo h∆∞·ªõng t∆∞∆°ng ·ª©ng.
 * - `color?: string` ‚Äî L·ªõp m√†u Tailwind ƒë·ªÉ t√¥ m√†u (v√≠ d·ª•: 'bg-neutral-3', 'border-primary-6').
 * - `padding?: string` ‚Äî Padding ngo√†i Divider (v√≠ d·ª•: 'py-2').
 * - `className?: string` ‚Äî Custom class cho Divider ngo√†i class m·∫∑c ƒë·ªãnh.
 * - `testId?: string` ‚Äî G√°n gi√° tr·ªã `data-testid` ph·ª•c v·ª• ki·ªÉm th·ª≠.
 * - `variant?: 'solid' | 'dashed' | 'dotted'` ‚Äî Variant c·ªßa Divider (m·∫∑c ƒë·ªãnh l√† 'solid').
 * - `classNameText?: string` ‚Äî Custom class cho text trong Divider.
 *
 * @accessibility
 * - G·∫Øn ƒë√∫ng `role="separator"` v√† `aria-orientation` ƒë·ªÉ h·ªó tr·ª£ a11y khi kh√¥ng c√≥ text.
 */
const Divider: React.FC<DividerProps> = ({
  orientation = "horizontal",
  text,
  className,
  thickness = "xs",
  color,
  length = "full",
  padding,
  testId,
  variant = "solid", // default
  classNameText,
  style,
}) => {
  const thicknessClass = THICKNESS_CLASS_MAP[orientation][thickness];
  const lengthClass = LENGTH_CLASS_MAP[orientation][length];
  const bgClass = color ?? "bg-neutral-3";
  const borderClass = color ?? "border-neutral-3";

  if (text) {
    return (
      <div
        style={style}
        className={clsx("flex items-center text-neutral-9", padding)}
        data-testid={testId}
      >
        <div className={clsx("grow border-t", borderClass)} />
        <span className={clsx("text-caption-10 mx-3 whitespace-nowrap", classNameText)}>
          {text}
        </span>
        <div className={clsx("grow border-t", borderClass)} />
      </div>
    );
  }

  // dashed/dotted custom style
  const variantClass =
    variant === "dashed"
      ? "divider-dashed"
      : variant === "dotted"
        ? "border-b border-dotted border-neutral-3"
        : "";

  return (
    <div
      role="separator"
      aria-orientation={orientation}
      data-testid={testId}
      className={clsx(
        "shrink-0",
        variant === "solid" ? bgClass : "",
        thicknessClass,
        lengthClass,
        padding,
        variantClass,
        className
      )}
    />
  );
};

export default memo(Divider);
