import * as React from "react";

import * as Form from "@radix-ui/react-form";
import clsx from "clsx";

import {
  // ALLOWED_CHAR_RE,
  stripDiacritics,
  stripSpecialCharactersUnicode,
} from "@/shared/utils/string.utils";

import Icon from "../icons/Icon";
import type { InputSize } from "./inputs.consts";
import {
  BASE_INPUT_CLASS,
  BASE_INPUT_CLASS_ACTION,
  BASE_POSITION_CLASS,
  DISABLED_INPUT_CLASS,
  ERROR_INPUT_CLASS,
  ERROR_TEXT_CLASS,
  INPUT_SIZE,
  TEXT_SIZE,
} from "./inputs.consts";

export interface FieldInputProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "name"> {
  name: string;
  label?: string;
  description?: string;
  error?: string | React.ReactNode;
  errorBorder?: boolean;
  iconLeft?: React.ReactNode;
  iconRight?: React.ReactNode;
  textSize?: "large" | "small";
  sizeInput?: keyof typeof InputSize | string;
  testId?: string;
  inputCustomClass?: string;
  /** Triggered when user clicks outside the input */
  onClickOutside?: () => void;
  isIconRightFocus?: boolean;
  /** If true, blocks special characters (only allows letters, numbers and spaces) */
  blockSpecialChars?: boolean;
  /** If true, automatically strip diacritics */
  autoStripDiacritics?: boolean;
  /** If true, automatically convert input to uppercase */
  autoUppercase?: boolean;
  /** Time to debounce transform text */
  debounceTransformText?: number;
}

/**
 * @component Input
 *
 * üëâ Input component chu·∫©n h√≥a cho c√°c tr∆∞·ªùng nh·∫≠p li·ªáu trong form.
 *
 * - H·ªó tr·ª£ label, m√¥ t·∫£, hi·ªÉn th·ªã l·ªói theo chu·∫©n Radix UI Form.
 * - T·ª± ƒë·ªông sinh ID v√† aria attributes ƒë·ªÉ ƒë·∫£m b·∫£o accessibility (a11y).
 * - Cho ph√©p icon b√™n tr√°i (`iconLeft`) v√† b√™n ph·∫£i (`iconRight`).
 * - H·ªó tr·ª£ tr∆∞·ªùng m·∫≠t kh·∫©u (`type="password"`) v·ªõi ch·ª©c nƒÉng show/hide m·∫≠t kh·∫©u.
 * - T·ª± ƒë·ªông √°p d·ª•ng c√°c k√≠ch th∆∞·ªõc (sizeInput) chu·∫©n: full, xl, lg, md, sm, xs.
 * - Cho ph√©p override th√™m className t√πy ch·ªânh n·∫øu c·∫ßn.
 * - H·ªó tr·ª£ c√°c k√≠ch th∆∞·ªõc font n·ªôi dung (`textSize`: 'large' | 'small').
 * - Hi·ªÉn th·ªã r√µ r√†ng tr·∫°ng th√°i l·ªói (error) v√† tr·∫°ng th√°i disable.
 * - N·∫øu truy·ªÅn `onClickOutside`, s·∫Ω t·ª± ƒë·ªông trigger khi click ra ngo√†i region
 * - N·∫øu `blockSpecialChars=true`, ch·∫∑n nh·∫≠p k√Ω t·ª± ƒë·∫∑c bi·ªát (ch·ªâ cho ph√©p ch·ªØ, s·ªë v√† kho·∫£ng tr·∫Øng)
 *
 * @example
 * ```tsx
 * <Input
 *   name="username"
 *   label="Username"
 *   placeholder="Enter your username"
 *   sizeInput="md"
 *   blockSpecialChars
 * />
 * ```
 *
 * @props
 * - `name: string` ‚Äî T√™n tr∆∞·ªùng form, b·∫Øt bu·ªôc.
 * - `label?: string` ‚Äî Label hi·ªÉn th·ªã ph√≠a tr√™n input.
 * - `description?: string` ‚Äî M√¥ t·∫£ th√™m cho input.
 * - `error?: string` ‚Äî Th√¥ng b√°o l·ªói, hi·ªÉn th·ªã d∆∞·ªõi input.
 * - `iconLeft?: React.ReactNode` ‚Äî Icon b√™n tr√°i input.
 * - `iconRight?: React.ReactNode` ‚Äî Icon b√™n ph·∫£i input.
 * - `textSize?: 'large' | 'small'` ‚Äî C·ª° ch·ªØ cho n·ªôi dung input, m·∫∑c ƒë·ªãnh 'large'.
 * - `sizeInput?: 'full' | 'xl' | 'lg' | 'md' | 'sm' | 'xs'` ‚Äî K√≠ch th∆∞·ªõc input, m·∫∑c ƒë·ªãnh 'full'.
 * - `testId?: string` ‚Äî G√°n gi√° tr·ªã cho `data-testid` (testing).
 * - `className?: string` ‚Äî G√°n th√™m custom class cho input container.
 * - `inputCustomClass?: string` ‚Äî G√°n th√™m custom class cho th·∫ª `<input>`.
 * - `onClickOutside?: () => void` ‚Äî Callback khi click ra ngo√†i v√πng input.
 * - `isIconRightFocus?: boolean` ‚Äî N·∫øu true, click v√†o iconRight s·∫Ω focus input.
 * - `blockSpecialChars?: boolean` ‚Äî N·∫øu true, ch·∫∑n nh·∫≠p k√Ω t·ª± ƒë·∫∑c bi·ªát (ch·ªâ cho ph√©p ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng).
 *
 * @accessibility
 * - T·ª± ƒë·ªông sinh aria-describedby t·ª´ description/error.
 * - G·∫Øn ƒë√∫ng role="alert" cho error message.
 */
const Input = React.forwardRef<HTMLInputElement, FieldInputProps>(
  (
    {
      name,
      label,
      description,
      error,
      errorBorder,
      iconLeft,
      iconRight,
      className,
      id,
      textSize = "large",
      sizeInput = "full",
      type,
      testId,
      inputCustomClass,
      required,
      autoComplete = "off",
      disabled,
      onClickOutside,
      isIconRightFocus,
      blockSpecialChars = false,
      autoStripDiacritics = false,
      autoUppercase = false,
      ...rest
    },
    ref
  ) => {
    const regionRef = React.useRef<HTMLDivElement>(null);

    // Generate stable IDs for input, description, error
    const generatedId = React.useId();
    const inputId = id ?? generatedId;

    // T·∫°o ID cho description v√† error (n·∫øu c√≥)
    const descriptionId = description ? `${inputId}-description` : undefined;
    const errorId = error ? `${inputId}-error` : undefined;

    // aria-describedby = ["m√¥ t·∫£", "l·ªói"]
    const ariaDescribedBy = React.useMemo(
      () => [descriptionId, errorId].filter(Boolean).join(" ") || undefined,
      [descriptionId, errorId]
    );

    // State show/hide password
    const [showPassword, setShowPassword] = React.useState(false);
    const inputType = type === "password" ? (showPassword ? "text" : "password") : type || "text";

    // Decide autoComplete: n·∫øu user truy·ªÅn th√¨ d√πng, ng∆∞·ª£c l·∫°i v·ªõi password set current-password
    const autoCompleteAttr = autoComplete ?? (type === "password" ? "current-password" : undefined);

    // L·∫•y class cho text + placeholder
    const textClass =
      textSize === "small"
        ? TEXT_SIZE.SMALL
        : textSize === "large"
          ? TEXT_SIZE.LARGE
          : TEXT_SIZE.MEDIUM;

    // L·∫•y class size (height/width) t·ª´ INPUT_SIZE map, n·∫øu kh√¥ng n·∫±m trong map th√¨ d√πng lu√¥n chu·ªói truy·ªÅn v√†o
    const sizeClass = (INPUT_SIZE[sizeInput as keyof typeof INPUT_SIZE] ?? sizeInput).trim();

    // Chu·∫©n logic ch·ªçn l·ªõp t∆∞∆°ng t√°c:
    // 1. Lu√¥n + BASE_POSITION_CLASS + BASE_INPUT_CLASS
    // 2. Sau ƒë√≥ n·∫øu c√≥ error: th√™m ERROR_INPUT_CLASS
    //    else n·∫øu disabled: th√™m DISABLED_INPUT_CLASS
    //    else (normal): th√™m BASE_INPUT_CLASS_ACTION
    const wrapperClass = clsx(
      BASE_POSITION_CLASS,
      BASE_INPUT_CLASS,
      error || errorBorder
        ? ERROR_INPUT_CLASS
        : disabled
          ? DISABLED_INPUT_CLASS
          : BASE_INPUT_CLASS_ACTION,
      sizeClass,
      className
    );

    // Click-away handler using pointerdown for consistency
    React.useEffect(() => {
      if (!onClickOutside) return;
      const handleClickAway = (evt: PointerEvent) => {
        if (regionRef.current && !regionRef.current.contains(evt.target as Node)) {
          onClickOutside();
        }
      };
      document.addEventListener("pointerdown", handleClickAway, true);
      return () => document.removeEventListener("pointerdown", handleClickAway, true);
    }, [onClickOutside]);

    // --- th√™m ref n·ªôi b·ªô ----
    const innerRef = React.useRef<HTMLInputElement | null>(null);

    // K·∫øt h·ª£p forwarded ref v√† innerRef
    const handleRef = (el: HTMLInputElement | null) => {
      innerRef.current = el;
      if (typeof ref === "function") ref(el);
      else if (ref) ref.current = el;
    };

    const {
      onChange: propOnChange,
      onPaste: propOnPaste,
      onKeyDown: propOnKeyDown,
      onBlur: propOnBlur,
      ...restProps
    } = rest;

    const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => {
      // N·∫øu ƒëang composition (g√µ d·∫•u), ho·∫∑c kh√¥ng b·∫≠t blockSpecialChars, ho·∫∑c key d√†i ‚â† 1 (Enter, Backspace‚Ä¶)
      if (!blockSpecialChars || e.key.length !== 1) {
        propOnKeyDown?.(e);
        return;
      }

      // // N·∫øu k√Ω t·ª± kh√¥ng n·∫±m trong whitelist th√¨ ch·∫∑n
      // if (!ALLOWED_CHAR_RE.test(e.key)) {
      //   e.preventDefault();
      //   return;
      // }

      // V·ªõi k√Ω t·ª± ƒë∆∞·ª£c ph√©p, chuy·ªÉn ti·∫øp event
      propOnKeyDown?.(e);
    };

    const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {
      // if (blockSpecialChars) {
      //   const raw = e.target.value;
      //   if (blockSpecialChars) {
      //     const sanitized = stripSpecialCharactersUnicode(raw);
      //     if (sanitized !== raw) {
      //       e.target.value = sanitized;
      //     }
      //   }
      // }

      propOnChange?.(e);
    };

    const handleBlur: React.FocusEventHandler<HTMLInputElement> = (e) => {
      const el = e.target as HTMLInputElement;
      // remove tones
      let finalValue = el.value;
      if (autoStripDiacritics) {
        finalValue = stripDiacritics(finalValue);
      }
      if (blockSpecialChars) {
        finalValue = stripSpecialCharactersUnicode(finalValue);
      }
      // uppercase
      if (autoUppercase) {
        finalValue = finalValue.toUpperCase();
      }
      if (finalValue !== el.value) {
        el.value = finalValue;
        el.dispatchEvent(new Event("input", { bubbles: true }));
      }
      propOnBlur?.(e);
    };

    const handlePaste: React.ClipboardEventHandler<HTMLInputElement> = (e) => {
      if (blockSpecialChars || autoUppercase) {
        const el = innerRef.current;
        if (!el) return;

        // Cho ph√©p d√°n
        setTimeout(() => {
          let val = el.value;

          if (autoStripDiacritics) {
            val = stripDiacritics(val);
          }

          // L√†m s·∫°ch k√Ω t·ª± ƒë·∫∑c bi·ªát n·∫øu b·∫≠t
          if (blockSpecialChars) {
            val = stripSpecialCharactersUnicode(val);
          }

          // Uppercase n·∫øu b·∫≠t
          if (autoUppercase) {
            val = val.toUpperCase();
          }

          // N·∫øu c√≥ thay ƒë·ªïi, c·∫≠p nh·∫≠t l·∫°i gi√° tr·ªã
          if (val !== el.value) {
            el.value = val;
            el.dispatchEvent(new Event("input", { bubbles: true }));
          }
        }, 0); // Delay nh·ªè ƒë·ªÉ ƒë·ª£i n·ªôi dung ƒë∆∞·ª£c d√°n v√†o

        propOnPaste?.(e);
      } else {
        propOnPaste?.(e);
      }
    };

    return (
      <Form.Field name={name} asChild>
        <div ref={regionRef} data-testid={testId} className="w-full">
          {/* Label */}
          {label && (
            <Form.Label htmlFor={inputId} className="block text-body-13 text-neutral-9">
              {label}
              {required && <span className="text-red-5">*</span>}
            </Form.Label>
          )}

          {/* Wrapper input + icon */}
          <div className={wrapperClass}>
            {/* Icon b√™n tr√°i */}
            {iconLeft && <span className="shrink-0">{iconLeft}</span>}

            {/* Th·∫ª input */}
            <Form.Control asChild>
              <input
                id={inputId}
                ref={handleRef}
                type={inputType}
                autoComplete={autoCompleteAttr}
                aria-invalid={!!error}
                aria-required={required || undefined}
                aria-describedby={ariaDescribedBy}
                disabled={disabled}
                className={clsx(
                  "size-full border-none bg-transparent p-0 outline-none focus:ring-0",
                  textClass,
                  "text-neutral-9 placeholder:text-neutral-4",
                  inputCustomClass
                )}
                onKeyDown={handleKeyDown}
                onChange={handleChange}
                onBlur={handleBlur}
                onPaste={handlePaste}
                {...restProps}
              />
            </Form.Control>

            {/* Icon show/hide password HO·∫∂C iconRight */}
            {type === "password" ? (
              <Icon
                name={showPassword ? "ViewOn" : "ViewOff"}
                onClick={() => setShowPassword((prev) => !prev)}
                key={showPassword ? "ViewOn" : "ViewOff"}
                color="secondary"
                role="button"
                tabIndex={-1}
                aria-label={showPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                onKeyDown={(e) => {
                  if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    setShowPassword((prev) => !prev);
                  }
                }}
              />
            ) : (
              iconRight && (
                <span
                  className="shrink-0"
                  onClick={() => isIconRightFocus && innerRef.current?.focus()}
                >
                  {iconRight}
                </span>
              )
            )}
          </div>

          {/* Ph·∫ßn m√¥ t·∫£ (description) */}
          {description && (
            <p id={descriptionId} className="mt-1 text-caption-12 text-start text-neutral-6">
              {description}
            </p>
          )}

          {/* Ph·∫ßn hi·ªÉn th·ªã l·ªói (error) */}
          {error && (
            <Form.Message asChild>
              <p id={errorId} role="alert" aria-live="assertive" className={ERROR_TEXT_CLASS}>
                {error}
              </p>
            </Form.Message>
          )}
        </div>
      </Form.Field>
    );
  }
);

Input.displayName = "Input";

export default Input;
