import React from "react";

import clsx from "clsx";

interface SectionFooterActionsProps {
  children: React.ReactNode;
  className?: string;
}

/**
 * @component SectionFooterActions
 *
 * üß∑ Component hi·ªÉn th·ªã h√†nh ƒë·ªông ho·∫∑c ghi ch√∫ ·ªü d∆∞·ªõi c√πng c·ªßa section, d√πng b√™n trong `Section.Footer`.
 * T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh layout theo s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ con:
 * - N·∫øu ch·ªâ c√≥ 1 ph·∫ßn t·ª≠: hi·ªÉn th·ªã d·∫°ng c·ªôt (`flex-col`)
 * - N·∫øu nhi·ªÅu ph·∫ßn t·ª≠: hi·ªÉn th·ªã h√†ng ngang (`flex-row`)
 *
 * ---
 * ‚úÖ Props:
 * - `children: React.ReactNode` ‚Äî C√°c h√†nh ƒë·ªông nh∆∞ n√∫t submit, hu·ª∑, ghi ch√∫...
 * - `className?: string` ‚Äî Custom class.
 *
 * ---
 * üì¶ Subcomponents:
 * - `SectionFooterActions.Left`: n·ªôi dung cƒÉn tr√°i (m√¥ t·∫£, ch√∫ th√≠ch).
 * - `SectionFooterActions.Right`: n·ªôi dung cƒÉn ph·∫£i (n√∫t h√†nh ƒë·ªông).
 *
 * ---
 * üí° V√≠ d·ª•:
 * ```tsx
 * <SectionFooterActions>
 *   <SectionFooterActions.Left>Ghi ch√∫ nh·ªè</SectionFooterActions.Left>
 *   <SectionFooterActions.Right>
 *     <Button>Hu·ª∑</Button>
 *     <Button primary>Ti·∫øp t·ª•c</Button>
 *   </SectionFooterActions.Right>
 * </SectionFooterActions>
 * ```
 */
const SectionFooterActions = ({ children, className }: SectionFooterActionsProps) => {
  const childrenArray = React.Children.toArray(children);
  const isSingle = childrenArray.length === 1;

  return (
    <div className={clsx("flex gap-4", isSingle ? "flex-col" : "flex-row items-center", className)}>
      {children}
    </div>
  );
};

const Left = ({ children, className }: { children: React.ReactNode; className?: string }) => (
  <div className={clsx("text-caption-12 flex-1 text-neutral-6", className)}>{children}</div>
);

const Right = ({ children, className }: { children: React.ReactNode; className?: string }) => (
  <div className={clsx("flex flex-1 justify-end", className)}>{children}</div>
);

SectionFooterActions.Left = Left;
SectionFooterActions.Right = Right;

export default SectionFooterActions;
